name: Canvas Editor Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

jobs:
  # Smoke tests for fast feedback
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Build application
        run: npm run build

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          BASE_URL: http://localhost:3000

      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Unit and integration tests
  unit-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run ESLint
        run: npm run lint

      - name: Run unit tests
        run: npm run test

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Build application
        run: npm run build

      - name: Run integration tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Accessibility testing
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Build application
        run: npm run build

      - name: Run accessibility tests
        run: npm run test:accessibility
        env:
          BASE_URL: http://localhost:3000

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Mobile testing
  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Build application
        run: npm run build

      - name: Run mobile tests
        run: npm run test:mobile
        env:
          BASE_URL: http://localhost:3000

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Performance testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Build application for production
        run: npm run build

      - name: Run performance tests
        run: npm run test:performance
        env:
          BASE_URL: http://localhost:3000

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Cross-browser testing (only on main branch or PR to main)
  cross-browser-tests:
    name: Cross-Browser Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.ref == 'refs/heads/main' || github.base_ref == 'main'
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run critical tests on ${{ matrix.browser }}
        run: npm run test:critical -- --project=${{ matrix.browser }}
        env:
          BASE_URL: http://localhost:3000

      - name: Upload cross-browser test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cross-browser-test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 15

  # Test report consolidation
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [smoke-tests, unit-integration-tests, accessibility-tests, mobile-tests, performance-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Generate consolidated test report
        run: |
          echo "# Test Suite Results" > TEST_REPORT.md
          echo "" >> TEST_REPORT.md
          echo "## Test Execution Summary" >> TEST_REPORT.md
          echo "" >> TEST_REPORT.md
          echo "- **Smoke Tests**: ${{ needs.smoke-tests.result }}" >> TEST_REPORT.md
          echo "- **Unit & Integration**: ${{ needs.unit-integration-tests.result }}" >> TEST_REPORT.md
          echo "- **Accessibility**: ${{ needs.accessibility-tests.result }}" >> TEST_REPORT.md
          echo "- **Mobile Tests**: ${{ needs.mobile-tests.result }}" >> TEST_REPORT.md
          echo "- **Performance**: ${{ needs.performance-tests.result }}" >> TEST_REPORT.md
          echo "" >> TEST_REPORT.md
          echo "## Artifacts" >> TEST_REPORT.md
          echo "- Test results and reports are available in the workflow artifacts" >> TEST_REPORT.md
          echo "- Playwright HTML reports include screenshots and traces for debugging" >> TEST_REPORT.md

      - name: Upload consolidated test report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-report
          path: TEST_REPORT.md
          retention-days: 90

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const testResults = {
              'Smoke Tests': '${{ needs.smoke-tests.result }}',
              'Unit & Integration': '${{ needs.unit-integration-tests.result }}',
              'Accessibility': '${{ needs.accessibility-tests.result }}',
              'Mobile Tests': '${{ needs.mobile-tests.result }}',
              'Performance': '${{ needs.performance-tests.result }}'
            };
            
            let comment = '## 🧪 Test Suite Results\n\n';
            
            for (const [testType, result] of Object.entries(testResults)) {
              const icon = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⚠️';
              comment += `- ${icon} **${testType}**: ${result}\n`;
            }
            
            comment += '\n📊 Detailed results and reports are available in the workflow artifacts.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Quality gate check
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [smoke-tests, unit-integration-tests, accessibility-tests, mobile-tests, performance-tests]
    if: always()
    steps:
      - name: Check quality gate
        run: |
          echo "Checking quality gate..."
          
          # All critical tests must pass
          if [[ "${{ needs.smoke-tests.result }}" != "success" ]]; then
            echo "❌ Smoke tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.unit-integration-tests.result }}" != "success" ]]; then
            echo "❌ Unit/Integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.accessibility-tests.result }}" != "success" ]]; then
            echo "❌ Accessibility tests failed"
            exit 1
          fi
          
          # Mobile and performance tests can be warnings but not blockers
          if [[ "${{ needs.mobile-tests.result }}" != "success" ]]; then
            echo "⚠️  Mobile tests failed - review required"
          fi
          
          if [[ "${{ needs.performance-tests.result }}" != "success" ]]; then
            echo "⚠️  Performance tests failed - review required"
          fi
          
          echo "✅ Quality gate passed"

      - name: Update commit status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const state = '${{ job.conclusion }}' === 'success' ? 'success' : 'failure';
            const description = state === 'success' ? 'Quality gate passed' : 'Quality gate failed';
            
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              description: description,
              context: 'Quality Gate'
            });

# Cleanup old artifacts to save storage
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            const oldArtifacts = artifacts.data.artifacts.filter(
              artifact => new Date() - new Date(artifact.created_at) > 30 * 24 * 60 * 60 * 1000
            );
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }